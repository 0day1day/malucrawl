import jsonschema
import json
import pkgutil

from celery import task

from .scan import scanners
from .search import search_engines
from .source import sources

validator = jsonschema.Draft3Validator(json.loads(pkgutil.get_data("malware_crawl", "malware_discovery_schema.json")))


def to_unicode(obj, encoding='utf-8'):
    # http://farmdev.com/talks/unicode/
    if isinstance(obj, basestring):
        if not isinstance(obj, unicode):
            obj = unicode(obj, encoding)
    return obj


def complete_crawl():
    for source in sources:
        source.apply_async(
            link=begin_search.subtask(args=(source,))
        )

    # todo: repeat old searches


@task
def begin_search(keywords, source):
    for keyword in keywords:
        for engine in search_engines:
            engine.apply_async(
                args=(keyword,), link=begin_scan.subtask(args=(engine, keyword, source))
            )


@task
def begin_scan(urls, engine, keyword, source):
    for url in urls:
        for scanner in scanners:
            scanner.apply_async(
                args=(url,), link=begin_store.subtask(args=(scanner, url, engine, keyword, source))
            )


@task
def begin_store(opinion, scanner, url, engine, keyword, source):
    print (opinion, scanner, url, keyword, source)

from models import (TopicSet, Topic, Search, Result, MalwareReport, Opinion)


def store(j_report, commit=True):
    try:
        validator.validate(j_report)
    except jsonschema.ValidationError:
        raise ValueError("Not a valid report")

    report = TopicSet(
        source=j_report["source"],
        discovered=j_report["discovered"]
    )
    topic_set = []
    for j_topic in j_report["topics"]:
        topic = Topic(
            keyword=j_topic["keyword"]
        )
        topic_set.append(topic)
        search_set = []
        for j_search in j_topic["searches"]:
            search = Search(
                source=j_search["source"],
                discovered=j_search["discovered"]
            )
            search_set.append(search)
            result_set = []
            for j_result in j_search["results"]:
                result = Result(
                    url=j_result["url"]
                )
                result_set.append(result)
                malware_report_set = []
                for j_malware_report in j_result["malware_reports"]:
                    malware_report = MalwareReport(
                        reporter=j_malware_report["reporter"]
                    )
                    malware_report_set.append(malware_report)
                    opinion_set = []
                    for j_opinion in j_malware_report["opinions"]:
                        opinion = Opinion(
                            type=j_opinion["type"],
                            confidence=j_opinion["confidence"]
                        )
                        opinion_set.append(opinion)
                    malware_report.opinion_set.add(*opinion_set)
                result.malware_report_set.add(*malware_report_set)
            search.result_set.add(*result_set)
        topic.search_set.add(*search_set)
    report.topic_set.add(*topic_set)

    if commit:
        report.save()
    return report
