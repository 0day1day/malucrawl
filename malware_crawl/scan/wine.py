import os
from sh import wine
import tempfile
import hashlib
import shutil
import pkgutil
from six import StringIO
import csv
from contextlib import closing
from urlparse import urlparse
import urllib2
import tarfile
import time
import threading
import filecmp

"""
w = wine.WineBrowser(wine.template_specifications)
w.start()
"""
master_wineprefix = '/home/wl15g09/project/ie-original'

template_specifications = (
    {
        "name": "ie6",
        "hash": '341013fac4fc3fdd823554f3ba4f31f14e81b9d3a7a2705504c86b14dfe96088',
        "tar_url": "http://users.ecs.soton.ac.uk/wl15g09/wineprefix_ie6.tar.gz",
        "url": "http://www.google.com",
        "command": r"C:/Program\ Files/Internet\ Explorer/IEXPLORE.EXE {url}",
        "tar_path": "/home/wl15g09/project/wineprefix_ie6.tar.gz",
        "project": "/home/wl15g09/project/"
    }
)

def verify(hash, data):
    s = hashlib.sha256()
    s.update(data)
    return hash == s.hexdigest()

def url_filename(url):
    return os.path.basename(urlparse(url).path)
    
def whitelist():
    with closing(StringIO()) as csvfile:
        for line in pkgutil.get_data("wine", "FileMonitor.exl").splitlines():
            if not line.startswith('#'):
                csvfile.write(line)

        for item in csv.DictReader(csvfile, dialect="excel-tab", fieldnames=("whitelist", "file_access", "process_name", "file_path")):
            item["whitelist"] = item["whitelist"] == "+"
            yield item
    
def check_change(temp,master=master_wineprefix):
    dir_cmp = filecmp.dircmp(temp, master)
    newfiles = dir_cmp.left_only
    deletedfiles = dir_cmp.right_only
    funnyfiles = dir_cmp.funny_files

    (_, modifiedfiles, errors) =  filecmp.cmpfiles(
        temp, master, dir_cmp.common_files, shallow=False)
    funnyfiles.extend(errors)
    
    for common_dir in dir_cmp.common_dirs:
        new_dir1 = os.path.join(temp, common_dir)
        new_dir2 = os.path.join(master, common_dir)
        (a,b,c,d) = check_change(new_dir1, master=new_dir2)
        newfiles.extend(a)
        deletedfiles.extend(b)
        modifiedfiles.extend(c)
        funnyfiles.extend(d)
            
    return (newfiles,deletedfiles,modifiedfiles,funnyfiles)
	
class WineBrowser(threading.Thread):
    closed = False

    def __init__(self, template_spec):
        threading.Thread.__init__(self)
        self.template_spec = template_spec
        self.wineprefix = self.create_wine_prefix(template_spec)
        self.wine_env = os.environ.copy().update({
            "WINEPREFIX": self.wineprefix,
            "WINEARCH": "win32"
        })
        
    def run(self):
        wine(self.template_spec["command"].format(url=self.template_spec['url']), _env=self.wineprefix)  # really this should be run in a separate thread.
        time.sleep(20)
        (a,b,c,d) = check_change(self.wineprefix)
        print "new files: %s\ndeleted files: %s\nmodified files: %s\nunresolved files: %s" % (a,b,c,d)

    def download_tar(self):
        chunk = 1048704 #1MB
        urlfile = urllib2.urlopen(self.template_spec['tar_url'])
        try:
            f = open(self.template_spec['tar_path'], 'r')
            if(verify(self.template_spec['hash'],f.read())):
                print 'Tar exists.'
                return f
            else:
                raise IOError
        except IOError:
            print 'Creating and downloading file...'
            f = open(self.template_spec['tar_path'], 'w+')
        while 1:
            data = urlfile.read(chunk)
            if not data:
                f.seek(0)
                if(verify(self.template_spec['hash'],f.read())):
                    print 'Download complete.'
                    return
                else:
                    f.close()
                    print 'Corrupted file. Downloading again...'
                    return self.download_tar()
            f.write(data)
            

    def create_wine_prefix(self, template_spec):
        self.download_tar()
        tar = tarfile.open(self.template_spec['tar_path'],'r:gz')
        temp_dir = tempfile.mkdtemp(prefix="ie-",dir=self.template_spec['project'])
        print temp_dir
        tar.extractall(temp_dir)
        return temp_dir

    def close(self):
        self.closed = True
        shutil.rmtree(self.wineprefix)



