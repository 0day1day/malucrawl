from __future__ import unicode_literals
import tempfile
import hashlib
import shutil
import pkgutil
import csv
import tarfile
import time
import filecmp
import xdg.BaseDirectory
import requests
import atexit

from contextlib import closing, contextmanager
from urlparse import urlparse
from six import BytesIO

from eventlet.green import os, subprocess
import eventlet

from datetime import timedelta

from pyvirtualdisplay.smartdisplay import SmartDisplay



"""
w = wine.WineBrowser(wine.template_specifications)
w.start()
"""

TEMPLATE = {
    "name": "ie6",
    "hash": b'^\xb6\x8d\xdf\xcf\x7fg\xa3\xeb\x9c$\x96\xcd\x1e\xb3\xb2\x0e^\x82s\xa1\x04\x1e\x1b\xf5\x8c\xa8\xb3)\xe5\x0c\xa0',
    "url": "http://users.ecs.soton.ac.uk/tag1g09/wineprefix_ie6.tar.gz",
    "command": r"C:/Program\ Files/Internet\ Explorer/IEXPLORE.EXE",
}


def verify(sha256b, data):
    s = hashlib.sha256()
    s.update(data)
    return sha256b == s.digest()


def url_filename(url):
    return os.path.basename(urlparse(url).path)


def whitelist():
    with closing(BytesIO()) as csvfile:
        for line in pkgutil.get_data("wine", "FileMonitor.exl").splitlines():
            if not line.startswith('#'):
                csvfile.write(line)
        print csvfile.read()

        for item in csv.DictReader(csvfile, dialect="excel-tab", fieldnames=("whitelist", "file_access", "process_name", "file_path")):
            item["whitelist"] = item["whitelist"] == "+"
            yield item


@contextmanager
def create_wine_prefix(template_spec):
        tar_path = os.path.join(
            xdg.BaseDirectory.save_cache_path("malucrawl"),
            template_spec["name"] + ".tar.gz",
        )

        if not os.path.isfile(tar_path):
            with open(tar_path, 'wb') as tar_file:
                tar_file.write(requests.get(template_spec["url"]).content)

        with open(tar_path, 'rb') as tar_file:
            if verify(template_spec["hash"], tar_file.read()):
                tar_file.seek(0)
                temp_dir = tempfile.mkdtemp(prefix="malucrawl_prefix-")
                tarfile.open(fileobj=tar_file, mode="r:gz").extractall(temp_dir)
            else:
                raise IOError("Wine bottle is not valid")
        try:
            yield temp_dir
        finally:
            shutil.rmtree(temp_dir)


disp = SmartDisplay(visible=0, bgcolor='black')
master_prefix = create_wine_prefix(TEMPLATE)

atexit.register(master_prefix.__exit__, None, None, None)
atexit.register(disp.__exit__, None, None, None)


def check_change(temp, master):
    dir_cmp = filecmp.dircmp(temp, master)
    newfiles = dir_cmp.left_only
    deletedfiles = dir_cmp.right_only
    funnyfiles = dir_cmp.funny_files

    (_, modifiedfiles, errors) = filecmp.cmpfiles(
        temp, master, dir_cmp.common_files, shallow=False)
    funnyfiles.extend(errors)

    for common_dir in dir_cmp.common_dirs:
        new_dir1 = os.path.join(temp, common_dir)
        new_dir2 = os.path.join(master, common_dir)
        (a, b, c, d) = check_change(new_dir1, master=new_dir2)
        newfiles.extend(a)
        deletedfiles.extend(b)
        modifiedfiles.extend(c)
        funnyfiles.extend(d)

    return (newfiles, deletedfiles, modifiedfiles, funnyfiles)


class WineBrowser():
    closed = False

    def __init__(self, template_spec):
        self.template_spec = template_spec
        self.wineprefix = create_wine_prefix(template_spec)

    def run(self):
        wine(
            self.template_spec["command"].format(url=self.template_spec['url']),
            _env=self.wineprefix
        )  # really this should be run in a separate thread.
        time.sleep(20)
        try:
            (a, b, c, d) = check_change(self.wineprefix)
        finally:
            print "new files: %s\ndeleted files: %s\nmodified files: %s\nunresolved files: %s" % (a, b, c, d)
            self.close()


def wine_scan(url):
    with create_wine_prefix(TEMPLATE) as prefix:
        env = os.environ.copy().update({
            "WINEPREFIX": prefix,
            "WINEARCH": "win32"
        })

        p = subprocess.Popen(["wine", TEMPLATE["command"], url], env=env)
        eventlet.sleep(
            timedelta(minutes=0.5).seconds
        )
        p.kill()

        check_change(prefix, master_prefix)
