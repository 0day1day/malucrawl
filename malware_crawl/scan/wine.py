import os
from sh import wine
import tempfile
import hashlib
import shutil
import pkgutil
from six import StringIO
import csv
from contextlib import closing
from urlparse import urlparse
import urllib2
import tarfile

template_specifications = (
    {
        "name": "ie6",
        "hash": b'[\xdfoK\x03\xdb\xcbR$\xef\xc97O\xbf^_\x8f,Fn>\xca\x80\x19\x83\xaa,^R\xe1\x0f\x92',
        "url": "https://github.com/downloads/chrissorchard/malucrawl/wineprefix_ie6.tar.gz",
        "command": r"C:/Program\ Files/Internet\ Explorer/IEXPLORE.EXE {url}"
    }
)

tar_hash = ''
tar_path = '/home/wl15g09/project/wineprefix_ie6.tar.gz'

def verify(hash, data):
    s = hashlib.sha256()
    s.update(data)
    return hash == s.digest()


def url_filename(url):
    return os.path.basename(urlparse(url).path)
	
class WineBrowser():
    closed = False

    def __init__(self, template_spec):
        self.wineprefix = WineBrowser.create_wine_prefix(template_spec)
        self.wine_env = os.environ.copy().update({
            "WINEPREFIX": self.wineprefix,
            "WINEARCH": "win32"
        })
        self.template_spec = template_spec

    def execute(self, url):
        wine(self.template_spec["command"].format(url=url), _env=self.wine_env)  # really this should be run in a separate thread.
        
    def download_tar():
        chunk = 1048704 #1MB
        #I get 404 when using the following link. (Seems it can only be accessed with logged in users)
        #urlfile = urllib2.urlopen('https://github.com/downloads/chrissorchard/malucrawl/wineprefix_ie6.tar.gz')
        urlfile = urllib2.urlopen('http://www.google.com')
        f = open(tar_path, 'rw+')
        while 1:
            data = urlfile.read(chunk)
            if not data:
                if(verify(tar_hash,f.read())):
                    return
                else:
                    f.close()
                    #open(tar_path,'w').close()
                    print 'Corrupted file. Downloading again...'
                    download_tar()
            f.write(data)

    @classmethod
    def create_wine_prefix(template_spec):
        download_tar()
        tar = tarfile.open(tar_path,'r:gz')
        """
        return path to temporary directory containing wine prefix matching the template_spec
        """
        temp_dir = tempfile.mkdtemp(prefix="malucrawl_prefix-")
        tar.extractall(temp_dir)
        
        return temp_dir

    def close(self):
        self.closed = True
        shutil.rmtree(self.wineprefix)


def whitelist():
    with closing(StringIO()) as csvfile:
        for line in pkgutil.get_data("wine", "FileMonitor.exl").splitlines():
            if not line.startswith('#'):
                csvfile.write(line)

        for item in csv.DictReader(csvfile, dialect="excel-tab", fieldnames=("whitelist", "file_access", "process_name", "file_path")):
            item["whitelist"] = item["whitelist"] == "+"
            yield item
