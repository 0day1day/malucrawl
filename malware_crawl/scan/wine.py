from __future__ import unicode_literals
import os
from sh import wine
import tempfile
import hashlib
import shutil
import pkgutil
from six import StringIO
import csv
from contextlib import closing
from urlparse import urlparse
import tarfile
import time
import threading
import filecmp
import xdg.BaseDirectory
import requests

"""
w = wine.WineBrowser(wine.template_specifications)
w.start()
"""

template_specifications = (
    {
        "name": "ie6",
        "hash": b'[\xdfoK\x03\xdb\xcbR$\xef\xc97O\xbf^_\x8f,Fn>\xca\x80\x19\x83\xaa,^R\xe1\x0f\x92',
        "url": "http://users.ecs.soton.ac.uk/tag1g09/wineprefix_ie6.tar.gz",
        "command": r"C:/Program\ Files/Internet\ Explorer/IEXPLORE.EXE {url}",
    },
)


def verify(sha256b, data):
    s = hashlib.sha256()
    s.update(data)
    return sha256b == s.digest()


def url_filename(url):
    return os.path.basename(urlparse(url).path)


def whitelist():
    with closing(StringIO()) as csvfile:
        for line in pkgutil.get_data("wine", "FileMonitor.exl").splitlines():
            if not line.startswith('#'):
                csvfile.write(line)

        for item in csv.DictReader(csvfile, dialect="excel-tab", fieldnames=("whitelist", "file_access", "process_name", "file_path")):
            item["whitelist"] = item["whitelist"] == "+"
            yield item


def create_wine_prefix(template_spec):
        tar_path = os.path.join(
            xdg.BaseDirectory.save_cache_path("malucrawl"),
            template_spec["name"] + ".tar.gz",
        )

        if not os.path.isfile(tar_path):
            with open(tar_path, 'wb') as tar_file:
                tar_file.write(requests.get(template_spec["url"]).content)

        with open(tar_path, 'rb') as tar_file:
            if verify(template_spec["hash"], tar_file.read()):
                tar_file.seek(0)
                temp_dir = tempfile.mkdtemp(prefix="malucrawl_prefix-")
                tarfile.open(fileobj=tar_file, mode="r:gz").extractall(temp_dir)
            else:
                raise IOError("Wine bottle is not valid")

        return temp_dir


def check_change(temp, master):
    dir_cmp = filecmp.dircmp(temp, master)
    newfiles = dir_cmp.left_only
    deletedfiles = dir_cmp.right_only
    funnyfiles = dir_cmp.funny_files

    (_, modifiedfiles, errors) = filecmp.cmpfiles(
        temp, master, dir_cmp.common_files, shallow=False)
    funnyfiles.extend(errors)

    for common_dir in dir_cmp.common_dirs:
        new_dir1 = os.path.join(temp, common_dir)
        new_dir2 = os.path.join(master, common_dir)
        (a, b, c, d) = check_change(new_dir1, master=new_dir2)
        newfiles.extend(a)
        deletedfiles.extend(b)
        modifiedfiles.extend(c)
        funnyfiles.extend(d)

    return (newfiles, deletedfiles, modifiedfiles, funnyfiles)


class WineBrowser(threading.Thread):
    closed = False

    def __init__(self, template_spec):
        threading.Thread.__init__(self)
        self.template_spec = template_spec
        self.wineprefix = create_wine_prefix(template_spec)
        self.wine_env = os.environ.copy().update({
            "WINEPREFIX": self.wineprefix,
            "WINEARCH": "win32"
        })

    def run(self):
        wine(self.template_spec["command"].format(url=self.template_spec['url']), _env=self.wineprefix)  # really this should be run in a separate thread.
        time.sleep(20)
        try:
            (a, b, c, d) = check_change(self.wineprefix)
        finally:
            print "new files: %s\ndeleted files: %s\nmodified files: %s\nunresolved files: %s" % (a, b, c, d)
            self.close()

    def close(self):
        self.closed = True
        shutil.rmtree(self.wineprefix)
